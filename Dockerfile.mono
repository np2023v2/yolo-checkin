# Multi-stage Dockerfile for YOLO Check-In Platform
# Contains: Frontend (Next.js), Backend (FastAPI), PostgreSQL
# Supports: ARM64 and AMD64 architectures

# Stage 1: Build Frontend
FROM node:18-alpine AS frontend-builder

WORKDIR /app/frontend

# Copy package files
COPY frontend/package*.json ./
RUN npm ci --production=false

# Copy frontend source
COPY frontend/ ./

# Build static frontend
RUN npm run build

# Stage 2: Build Backend Dependencies
FROM python:3.11-slim AS backend-builder

WORKDIR /app/backend

# Install build dependencies
RUN apt-get update && apt-get install -y \
    gcc \
    g++ \
    libpq-dev \
    && rm -rf /var/lib/apt/lists/*

# Copy and install Python dependencies
COPY backend/requirements.txt .
RUN pip install --no-cache-dir --user -r requirements.txt

# Stage 3: Final Production Image
FROM python:3.11-slim

# Install runtime dependencies and PostgreSQL
RUN apt-get update && apt-get install -y \
    gcc \
    g++ \
    libpq-dev \
    libglib2.0-0 \
    libsm6 \
    libxext6 \
    libxrender-dev \
    libgomp1 \
    libgl1-mesa-glx \
    postgresql-15 \
    postgresql-contrib-15 \
    supervisor \
    nginx \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Set working directory
WORKDIR /app

# Copy Python dependencies from builder
COPY --from=backend-builder /root/.local /root/.local
ENV PATH=/root/.local/bin:$PATH

# Copy backend code
COPY backend/ /app/backend/

# Copy built frontend
COPY --from=frontend-builder /app/frontend/.next /app/frontend/.next
COPY --from=frontend-builder /app/frontend/public /app/frontend/public
COPY --from=frontend-builder /app/frontend/package*.json /app/frontend/
COPY --from=frontend-builder /app/frontend/next.config.js /app/frontend/

# Install Node.js for running Next.js in production
RUN curl -fsSL https://deb.nodesource.com/setup_18.x | bash - && \
    apt-get install -y nodejs && \
    cd /app/frontend && npm ci --production && \
    rm -rf /var/lib/apt/lists/*

# Create necessary directories
RUN mkdir -p /app/uploads /app/models /app/datasets /var/lib/postgresql/data /var/run/postgresql && \
    chown -R postgres:postgres /var/lib/postgresql /var/run/postgresql

# Copy configuration files
COPY docker/mono/supervisord.conf /etc/supervisor/conf.d/supervisord.conf
COPY docker/mono/nginx.conf /etc/nginx/nginx.conf
COPY docker/mono/init.sh /app/init.sh
COPY docker/mono/.env.mono.example /app/.env.example

# Make init script executable
RUN chmod +x /app/init.sh

# Expose ports
EXPOSE 80 5432

# Environment variables with defaults
ENV DATABASE_URL=postgresql://yolouser:yolopass@localhost:5432/yolodb \
    SECRET_KEY=change-this-in-production-use-openssl-rand-hex-32 \
    POSTGRES_USER=yolouser \
    POSTGRES_PASSWORD=yolopass \
    POSTGRES_DB=yolodb \
    API_V1_STR=/api/v1 \
    UPLOAD_DIR=/app/uploads \
    MODEL_DIR=/app/models \
    DATASET_DIR=/app/datasets

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost/health || exit 1

# Start services using supervisor
CMD ["/app/init.sh"]
